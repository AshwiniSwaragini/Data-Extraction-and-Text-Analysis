{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-09-12T08:20:24.001451Z","iopub.execute_input":"2023-09-12T08:20:24.001856Z","iopub.status.idle":"2023-09-12T08:20:24.381511Z","shell.execute_reply.started":"2023-09-12T08:20:24.001829Z","shell.execute_reply":"2023-09-12T08:20:24.380556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/nifty50-stocks/NIFTY50_Stocks/NIFTY50/CIPLA.NS.csv')","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.383299Z","iopub.execute_input":"2023-09-12T08:20:24.384437Z","iopub.status.idle":"2023-09-12T08:20:24.416909Z","shell.execute_reply.started":"2023-09-12T08:20:24.384403Z","shell.execute_reply":"2023-09-12T08:20:24.416031Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.419859Z","iopub.execute_input":"2023-09-12T08:20:24.420136Z","iopub.status.idle":"2023-09-12T08:20:24.442034Z","shell.execute_reply.started":"2023-09-12T08:20:24.420108Z","shell.execute_reply":"2023-09-12T08:20:24.441041Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.tail()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.445055Z","iopub.execute_input":"2023-09-12T08:20:24.445423Z","iopub.status.idle":"2023-09-12T08:20:24.459046Z","shell.execute_reply.started":"2023-09-12T08:20:24.445373Z","shell.execute_reply":"2023-09-12T08:20:24.458049Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.460778Z","iopub.execute_input":"2023-09-12T08:20:24.461135Z","iopub.status.idle":"2023-09-12T08:20:24.468360Z","shell.execute_reply.started":"2023-09-12T08:20:24.461104Z","shell.execute_reply":"2023-09-12T08:20:24.467456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.469735Z","iopub.execute_input":"2023-09-12T08:20:24.470575Z","iopub.status.idle":"2023-09-12T08:20:24.495132Z","shell.execute_reply.started":"2023-09-12T08:20:24.470544Z","shell.execute_reply":"2023-09-12T08:20:24.494225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.496219Z","iopub.execute_input":"2023-09-12T08:20:24.496967Z","iopub.status.idle":"2023-09-12T08:20:24.506644Z","shell.execute_reply.started":"2023-09-12T08:20:24.496934Z","shell.execute_reply":"2023-09-12T08:20:24.505648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Backward Fill (bfill):**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming your data is in a DataFrame named df with a 'Date' column\n# Sort the DataFrame by the date if it's not already sorted\ndf.sort_values(by='Date', inplace=True)\n\n# Backward fill (bfill) missing values in the specified columns\ncolumns_to_fill = ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\ndf[columns_to_fill] = df[columns_to_fill].fillna(method='bfill')\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.508066Z","iopub.execute_input":"2023-09-12T08:20:24.508499Z","iopub.status.idle":"2023-09-12T08:20:24.529209Z","shell.execute_reply.started":"2023-09-12T08:20:24.508467Z","shell.execute_reply":"2023-09-12T08:20:24.528275Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.532073Z","iopub.execute_input":"2023-09-12T08:20:24.532361Z","iopub.status.idle":"2023-09-12T08:20:24.542066Z","shell.execute_reply.started":"2023-09-12T08:20:24.532338Z","shell.execute_reply":"2023-09-12T08:20:24.540941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Date']= pd.to_datetime(df['Date'],format='%Y-%m-%d')","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.546501Z","iopub.execute_input":"2023-09-12T08:20:24.546758Z","iopub.status.idle":"2023-09-12T08:20:24.557445Z","shell.execute_reply.started":"2023-09-12T08:20:24.546729Z","shell.execute_reply":"2023-09-12T08:20:24.556455Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cipla_stock = df.set_index('Date')\ncipla_stock.head()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.558913Z","iopub.execute_input":"2023-09-12T08:20:24.559353Z","iopub.status.idle":"2023-09-12T08:20:24.579862Z","shell.execute_reply.started":"2023-09-12T08:20:24.559323Z","shell.execute_reply":"2023-09-12T08:20:24.579002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Visualizations**","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.581031Z","iopub.execute_input":"2023-09-12T08:20:24.581363Z","iopub.status.idle":"2023-09-12T08:20:24.586335Z","shell.execute_reply.started":"2023-09-12T08:20:24.581332Z","shell.execute_reply":"2023-09-12T08:20:24.585393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20,10))\n#Plot 1\nplt.subplot(2,2,1)\nplt.plot(cipla_stock['Open'],color='green')\nplt.xlabel('Date')\nplt.ylabel('Open Price')\nplt.title('Open')\n#Plot 2\nplt.subplot(2,2,2)\nplt.plot(cipla_stock['Close'],color='red')\nplt.xlabel('Date')\nplt.ylabel('Close Price')\nplt.title('Close')\n#Plot 3\nplt.subplot(2,2,3)\nplt.plot(cipla_stock['High'],color='green')\nplt.xlabel('Date')\nplt.ylabel('High Price')\nplt.title('High')\n#Plot 4\nplt.subplot(2,2,4)\nplt.plot(cipla_stock['Low'],color='red')\nplt.xlabel('Date')\nplt.ylabel('Low Price')\nplt.title('Low')","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:24.587591Z","iopub.execute_input":"2023-09-12T08:20:24.588360Z","iopub.status.idle":"2023-09-12T08:20:26.457426Z","shell.execute_reply.started":"2023-09-12T08:20:24.588329Z","shell.execute_reply":"2023-09-12T08:20:26.456049Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Creating box-plots\nplt.figure(figsize=(20,10))\n#Plot 1\nplt.subplot(2,2,1)\nplt.boxplot(cipla_stock['Open'])\nplt.xlabel('Date')\nplt.ylabel('Open Price')\nplt.title('Open')\n#Plot 2\nplt.subplot(2,2,2)\nplt.boxplot(cipla_stock['Close'])\nplt.xlabel('Date')\nplt.ylabel('Cloes Price')\nplt.title('Close')\n#Plot 3\nplt.subplot(2,2,3)\nplt.boxplot(cipla_stock['High'])\nplt.xlabel('Date')\nplt.ylabel('High Price')\nplt.title('High')\n#Plot 4\nplt.subplot(2,2,4)\nplt.boxplot(cipla_stock['Low'])\nplt.xlabel('Date')\nplt.ylabel('Low Price')\nplt.title('Low')","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:26.458654Z","iopub.execute_input":"2023-09-12T08:20:26.459174Z","iopub.status.idle":"2023-09-12T08:20:27.527537Z","shell.execute_reply.started":"2023-09-12T08:20:26.459140Z","shell.execute_reply":"2023-09-12T08:20:27.526202Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\n# KDE-Plots\nplt.figure(figsize=(20,10))\n#Plot 1\nplt.subplot(2,2,1)\nsns.kdeplot(cipla_stock['Open'], color='green')\nplt.title('Open')\n#Plot 2\nplt.subplot(2,2,2)\nsns.kdeplot(cipla_stock['Close'], color='red')\nplt.title('Close')\n#Plot 3\nplt.subplot(2,2,3)\nsns.kdeplot(cipla_stock['High'], color='green')\nplt.title('High')\n#Plot 4\nplt.subplot(2,2,4)\nsns.kdeplot(cipla_stock['Low'], color='red')\nplt.title('Low')","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:27.532035Z","iopub.execute_input":"2023-09-12T08:20:27.532439Z","iopub.status.idle":"2023-09-12T08:20:30.141956Z","shell.execute_reply.started":"2023-09-12T08:20:27.532403Z","shell.execute_reply":"2023-09-12T08:20:30.141046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nsns.heatmap(cipla_stock.corr(),annot=True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:30.143565Z","iopub.execute_input":"2023-09-12T08:20:30.144295Z","iopub.status.idle":"2023-09-12T08:20:30.498435Z","shell.execute_reply.started":"2023-09-12T08:20:30.144261Z","shell.execute_reply":"2023-09-12T08:20:30.497504Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Finding long-term and short-term trends\n# Moving Average**","metadata":{}},{"cell_type":"code","source":"cipla_ma=cipla_stock.copy()\ncipla_ma['30-day MA']=cipla_stock['Close'].rolling(window=30).mean()\ncipla_ma['200-day MA']=cipla_stock['Close'].rolling(window=200).mean()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:30.499987Z","iopub.execute_input":"2023-09-12T08:20:30.500739Z","iopub.status.idle":"2023-09-12T08:20:30.509290Z","shell.execute_reply.started":"2023-09-12T08:20:30.500705Z","shell.execute_reply":"2023-09-12T08:20:30.508295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20,10))\nplt.plot(cipla_ma['Close'],label='Original data')\nplt.plot(cipla_ma['30-day MA'],label='30-MA')\nplt.legend\nplt.title('Stock Price vs 30-day Moving Average')\nplt.xlabel('Date')\nplt.ylabel('Price')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:30.511007Z","iopub.execute_input":"2023-09-12T08:20:30.511361Z","iopub.status.idle":"2023-09-12T08:20:30.992186Z","shell.execute_reply.started":"2023-09-12T08:20:30.511329Z","shell.execute_reply":"2023-09-12T08:20:30.988218Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20,10))\nplt.plot(cipla_ma['Close'],label='Original data')\nplt.plot(cipla_ma['200-day MA'],label='200-MA')\nplt.legend\nplt.title('Stock Price vs 200-day Moving Average')\nplt.xlabel('Date')\nplt.ylabel('Price')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:30.993905Z","iopub.execute_input":"2023-09-12T08:20:30.994278Z","iopub.status.idle":"2023-09-12T08:20:31.470966Z","shell.execute_reply.started":"2023-09-12T08:20:30.994245Z","shell.execute_reply":"2023-09-12T08:20:31.470110Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Long term and short term trends can be identified using the Moving Average grph**","metadata":{}},{"cell_type":"markdown","source":"# * In long term, Stock price is in upward trend\n# * Short term trends can be identified from MA-30 chart\n# * Stock had a major short term downtrend during the year 2020\n# * It may be due to the bearish market during the Covid-19 outbraek","metadata":{}},{"cell_type":"code","source":"cipla = cipla_stock.reset_index()['Close']","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:31.472420Z","iopub.execute_input":"2023-09-12T08:20:31.473000Z","iopub.status.idle":"2023-09-12T08:20:31.478547Z","shell.execute_reply.started":"2023-09-12T08:20:31.472967Z","shell.execute_reply":"2023-09-12T08:20:31.477613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cipla.shape","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:31.479900Z","iopub.execute_input":"2023-09-12T08:20:31.480525Z","iopub.status.idle":"2023-09-12T08:20:31.493293Z","shell.execute_reply.started":"2023-09-12T08:20:31.480490Z","shell.execute_reply":"2023-09-12T08:20:31.492326Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(cipla)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:31.494788Z","iopub.execute_input":"2023-09-12T08:20:31.495188Z","iopub.status.idle":"2023-09-12T08:20:31.836377Z","shell.execute_reply.started":"2023-09-12T08:20:31.495158Z","shell.execute_reply":"2023-09-12T08:20:31.835470Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:31.837837Z","iopub.execute_input":"2023-09-12T08:20:31.838209Z","iopub.status.idle":"2023-09-12T08:20:31.842621Z","shell.execute_reply.started":"2023-09-12T08:20:31.838176Z","shell.execute_reply":"2023-09-12T08:20:31.841662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ncipla=scaler.fit_transform(np.array(cipla).reshape(-1,1))","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:31.844101Z","iopub.execute_input":"2023-09-12T08:20:31.844748Z","iopub.status.idle":"2023-09-12T08:20:32.026719Z","shell.execute_reply.started":"2023-09-12T08:20:31.844714Z","shell.execute_reply":"2023-09-12T08:20:32.025600Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cipla.shape","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.031131Z","iopub.execute_input":"2023-09-12T08:20:32.031749Z","iopub.status.idle":"2023-09-12T08:20:32.044670Z","shell.execute_reply.started":"2023-09-12T08:20:32.031715Z","shell.execute_reply":"2023-09-12T08:20:32.043321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(cipla)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.045808Z","iopub.execute_input":"2023-09-12T08:20:32.046409Z","iopub.status.idle":"2023-09-12T08:20:32.059505Z","shell.execute_reply.started":"2023-09-12T08:20:32.046377Z","shell.execute_reply":"2023-09-12T08:20:32.058632Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Train_Test_Split**","metadata":{}},{"cell_type":"markdown","source":"**Inthe cross validation,use random seed. in our TimeSeriesdataset,values ordered by 'Date',SO Historical data divide by sorted date values...AS next data dependant on previous data values**","metadata":{}},{"cell_type":"code","source":"##splitting dataset into train and test split\ntraining_size=int(len(cipla)*0.65)\ntest_size=len(cipla)-training_size\ntrain_data,test_data=cipla[0:training_size,:],cipla[training_size:len(cipla),:1]","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.061153Z","iopub.execute_input":"2023-09-12T08:20:32.061773Z","iopub.status.idle":"2023-09-12T08:20:32.074547Z","shell.execute_reply.started":"2023-09-12T08:20:32.061740Z","shell.execute_reply":"2023-09-12T08:20:32.072430Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"training_size,test_size","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.085550Z","iopub.execute_input":"2023-09-12T08:20:32.086283Z","iopub.status.idle":"2023-09-12T08:20:32.093055Z","shell.execute_reply.started":"2023-09-12T08:20:32.086249Z","shell.execute_reply":"2023-09-12T08:20:32.092059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy\n# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn numpy.array(dataX), numpy.array(dataY)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.094675Z","iopub.execute_input":"2023-09-12T08:20:32.095060Z","iopub.status.idle":"2023-09-12T08:20:32.102355Z","shell.execute_reply.started":"2023-09-12T08:20:32.095013Z","shell.execute_reply":"2023-09-12T08:20:32.101639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.103560Z","iopub.execute_input":"2023-09-12T08:20:32.105486Z","iopub.status.idle":"2023-09-12T08:20:32.124936Z","shell.execute_reply.started":"2023-09-12T08:20:32.105461Z","shell.execute_reply":"2023-09-12T08:20:32.123990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X_train.shape), print(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.127662Z","iopub.execute_input":"2023-09-12T08:20:32.128530Z","iopub.status.idle":"2023-09-12T08:20:32.137156Z","shell.execute_reply.started":"2023-09-12T08:20:32.128500Z","shell.execute_reply":"2023-09-12T08:20:32.136146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X_test.shape), print(y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.138535Z","iopub.execute_input":"2023-09-12T08:20:32.138984Z","iopub.status.idle":"2023-09-12T08:20:32.150063Z","shell.execute_reply.started":"2023-09-12T08:20:32.138952Z","shell.execute_reply":"2023-09-12T08:20:32.148934Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_train.shape","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.151752Z","iopub.execute_input":"2023-09-12T08:20:32.152204Z","iopub.status.idle":"2023-09-12T08:20:32.160182Z","shell.execute_reply.started":"2023-09-12T08:20:32.152173Z","shell.execute_reply":"2023-09-12T08:20:32.159072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_train)\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.161494Z","iopub.execute_input":"2023-09-12T08:20:32.162061Z","iopub.status.idle":"2023-09-12T08:20:32.169871Z","shell.execute_reply.started":"2023-09-12T08:20:32.162030Z","shell.execute_reply":"2023-09-12T08:20:32.168837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# Check for NaN values in X_train\nnan_count_X_train = np.isnan(X_train).sum()\nprint(\"Number of NaN values in X_train:\", nan_count_X_train)\n\n# Check for NaN values in X_test\nnan_count_X_test = np.isnan(X_test).sum()\nprint(\"Number of NaN values in X_test:\", nan_count_X_test)\n\n# Check for NaN values in y_train\nnan_count_y_train = np.isnan(y_train).sum()\nprint(\"Number of NaN values in y_train:\", nan_count_y_train)\n\n# Check for NaN values in y_test\nnan_count_y_test = np.isnan(y_test).sum()\nprint(\"Number of NaN values in y_test:\", nan_count_y_test)\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.171717Z","iopub.execute_input":"2023-09-12T08:20:32.172134Z","iopub.status.idle":"2023-09-12T08:20:32.183726Z","shell.execute_reply.started":"2023-09-12T08:20:32.172099Z","shell.execute_reply":"2023-09-12T08:20:32.182389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.185409Z","iopub.execute_input":"2023-09-12T08:20:32.185998Z","iopub.status.idle":"2023-09-12T08:20:32.194157Z","shell.execute_reply.started":"2023-09-12T08:20:32.185962Z","shell.execute_reply":"2023-09-12T08:20:32.192532Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import  keras\nimport  tensorflow as tf","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:32.195646Z","iopub.execute_input":"2023-09-12T08:20:32.196111Z","iopub.status.idle":"2023-09-12T08:20:39.678794Z","shell.execute_reply.started":"2023-09-12T08:20:32.196065Z","shell.execute_reply":"2023-09-12T08:20:39.677836Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add an LSTM layer with dropout and return_sequences\nmodel.add(LSTM(50, return_sequences=True, input_shape=(100, 1)))\nmodel.add(Dropout(0.2))  # You can adjust the dropout rate as needed\n\n# Add another LSTM layer with dropout and return_sequences\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(Dropout(0.2))  # You can adjust the dropout rate as needed\n\n# Add a third LSTM layer with dropout\nmodel.add(LSTM(50))\nmodel.add(Dropout(0.2))  # You can adjust the dropout rate as needed\n\n# Add a Dense output layer\nmodel.add(Dense(1))\n\n# Compile the model with a lower learning rate\noptimizer = Adam(learning_rate=0.001)  # You can adjust the learning rate\nmodel.compile(loss='mean_squared_error', optimizer=optimizer)\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:39.680314Z","iopub.execute_input":"2023-09-12T08:20:39.680992Z","iopub.status.idle":"2023-09-12T08:20:43.905304Z","shell.execute_reply.started":"2023-09-12T08:20:39.680957Z","shell.execute_reply":"2023-09-12T08:20:43.904330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:43.906661Z","iopub.execute_input":"2023-09-12T08:20:43.907012Z","iopub.status.idle":"2023-09-12T08:20:43.934452Z","shell.execute_reply.started":"2023-09-12T08:20:43.906980Z","shell.execute_reply":"2023-09-12T08:20:43.933751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the model\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=64, validation_data=(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:20:43.935325Z","iopub.execute_input":"2023-09-12T08:20:43.935628Z","iopub.status.idle":"2023-09-12T08:23:10.334770Z","shell.execute_reply.started":"2023-09-12T08:20:43.935598Z","shell.execute_reply":"2023-09-12T08:23:10.333744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:23:10.336580Z","iopub.execute_input":"2023-09-12T08:23:10.337176Z","iopub.status.idle":"2023-09-12T08:23:12.776595Z","shell.execute_reply.started":"2023-09-12T08:23:10.337142Z","shell.execute_reply":"2023-09-12T08:23:12.775655Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:23:12.777923Z","iopub.execute_input":"2023-09-12T08:23:12.778299Z","iopub.status.idle":"2023-09-12T08:23:12.784972Z","shell.execute_reply.started":"2023-09-12T08:23:12.778266Z","shell.execute_reply":"2023-09-12T08:23:12.783990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Calculate RMSE performance metrics\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:23:12.786350Z","iopub.execute_input":"2023-09-12T08:23:12.786764Z","iopub.status.idle":"2023-09-12T08:23:12.878519Z","shell.execute_reply.started":"2023-09-12T08:23:12.786730Z","shell.execute_reply":"2023-09-12T08:23:12.877454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Test Data RMSE\nmath.sqrt(mean_squared_error(y_test,test_predict))","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:23:12.880135Z","iopub.execute_input":"2023-09-12T08:23:12.880485Z","iopub.status.idle":"2023-09-12T08:23:12.888576Z","shell.execute_reply.started":"2023-09-12T08:23:12.880452Z","shell.execute_reply":"2023-09-12T08:23:12.887479Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = numpy.empty_like(cipla)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = numpy.empty_like(cipla)\ntestPredictPlot[:, :] = numpy.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(cipla)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(cipla))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:23:50.098950Z","iopub.execute_input":"2023-09-12T08:23:50.099606Z","iopub.status.idle":"2023-09-12T08:23:50.348597Z","shell.execute_reply.started":"2023-09-12T08:23:50.099575Z","shell.execute_reply":"2023-09-12T08:23:50.347682Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(test_data)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:35:00.371385Z","iopub.execute_input":"2023-09-12T08:35:00.371751Z","iopub.status.idle":"2023-09-12T08:35:00.378457Z","shell.execute_reply.started":"2023-09-12T08:35:00.371722Z","shell.execute_reply":"2023-09-12T08:35:00.377408Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_input=test_data[2109:].reshape(1,-1)\nx_input.shape","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:35:03.519226Z","iopub.execute_input":"2023-09-12T08:35:03.520138Z","iopub.status.idle":"2023-09-12T08:35:03.527550Z","shell.execute_reply.started":"2023-09-12T08:35:03.520098Z","shell.execute_reply":"2023-09-12T08:35:03.525587Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:35:24.089975Z","iopub.execute_input":"2023-09-12T08:35:24.090353Z","iopub.status.idle":"2023-09-12T08:35:24.095026Z","shell.execute_reply.started":"2023-09-12T08:35:24.090325Z","shell.execute_reply":"2023-09-12T08:35:24.094062Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Size of x_input:\", x_input.size)\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:35:27.460851Z","iopub.execute_input":"2023-09-12T08:35:27.461239Z","iopub.status.idle":"2023-09-12T08:35:27.466776Z","shell.execute_reply.started":"2023-09-12T08:35:27.461209Z","shell.execute_reply":"2023-09-12T08:35:27.465803Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# demonstrate prediction for next 10 days\nfrom numpy import array\n\nlst_output=[]\nn_steps=200\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>200):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:37:44.947945Z","iopub.execute_input":"2023-09-12T08:37:44.948615Z","iopub.status.idle":"2023-09-12T08:37:47.643096Z","shell.execute_reply.started":"2023-09-12T08:37:44.948582Z","shell.execute_reply":"2023-09-12T08:37:47.642155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"day_new=np.arange(1,201)\nday_pred=np.arange(201,231)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:38:23.877013Z","iopub.execute_input":"2023-09-12T08:38:23.878019Z","iopub.status.idle":"2023-09-12T08:38:23.883762Z","shell.execute_reply.started":"2023-09-12T08:38:23.877983Z","shell.execute_reply":"2023-09-12T08:38:23.882429Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(cipla)  #23march'23............2july'23","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:38:37.691073Z","iopub.execute_input":"2023-09-12T08:38:37.691463Z","iopub.status.idle":"2023-09-12T08:38:37.698132Z","shell.execute_reply.started":"2023-09-12T08:38:37.691435Z","shell.execute_reply":"2023-09-12T08:38:37.697148Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(day_new,scaler.inverse_transform(cipla[6395:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:38:51.670950Z","iopub.execute_input":"2023-09-12T08:38:51.671619Z","iopub.status.idle":"2023-09-12T08:38:51.922054Z","shell.execute_reply.started":"2023-09-12T08:38:51.671586Z","shell.execute_reply":"2023-09-12T08:38:51.921044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3=cipla.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[6445:])","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:39:47.108913Z","iopub.execute_input":"2023-09-12T08:39:47.109282Z","iopub.status.idle":"2023-09-12T08:39:47.370615Z","shell.execute_reply.started":"2023-09-12T08:39:47.109252Z","shell.execute_reply":"2023-09-12T08:39:47.369686Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3=scaler.inverse_transform(df3).tolist()","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:40:01.320950Z","iopub.execute_input":"2023-09-12T08:40:01.321624Z","iopub.status.idle":"2023-09-12T08:40:01.336012Z","shell.execute_reply.started":"2023-09-12T08:40:01.321590Z","shell.execute_reply":"2023-09-12T08:40:01.334869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(df3)","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:40:07.099616Z","iopub.execute_input":"2023-09-12T08:40:07.100024Z","iopub.status.idle":"2023-09-12T08:40:07.405970Z","shell.execute_reply.started":"2023-09-12T08:40:07.099992Z","shell.execute_reply":"2023-09-12T08:40:07.405011Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **THANK YOU**","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# day_new contains the original time series data up to the current day\n# cipla[6395:] contains the corresponding values for that time period\n\n# day_pred contains the days for which you want to make predictions\n# lst_output contains the predicted values for those days\n\n# Create an array of future days for plotting\nfuture_days = np.arange(day_new[-1] + 1, day_new[-1] + 201)  # Assuming the next 200 days\n\n# Extend the original data with NaN values for the predicted days\nextended_day_new = np.concatenate((day_new, future_days))\nextended_cipla_actual = scaler.inverse_transform(cipla[6395:]).flatten()\nextended_cipla_predictions = np.full(200, np.nan)\n\n# Concatenate actual data and predictions\nextended_cipla = np.concatenate((extended_cipla_actual, extended_cipla_predictions))\n\n# Plot the extended time series data\nplt.plot(extended_day_new, extended_cipla, label='Actual Data + Predictions')\nplt.xlabel('Day')\nplt.ylabel('Value')\nplt.title('Time Series Prediction for Next 200 Days')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-09-12T08:46:26.818905Z","iopub.execute_input":"2023-09-12T08:46:26.819287Z","iopub.status.idle":"2023-09-12T08:46:27.122888Z","shell.execute_reply.started":"2023-09-12T08:46:26.819256Z","shell.execute_reply":"2023-09-12T08:46:27.121981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}],"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}}